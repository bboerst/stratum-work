terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = ">= 4.0.0" # Specify a version constraint
    }
    random = {
      source  = "hashicorp/random"
      version = ">= 3.0.0"
    }
  }
}

resource "random_id" "instance_suffix" {
  byte_length = 4 # Creates an 8-character hex string, e.g. "b1d5f8a1"
}

# Clean pool name for use in resource names (GCP requires lowercase, numbers, hyphens)
locals {
  cleaned_vm_identifier = lower(replace(var.vm_identifier, "/[^a-z0-9-]+/", "-"))
  # Ensure instance name is unique and adheres to GCP naming conventions (max 63 chars, starts with letter)
  # Prefix + cleaned_pool_name + random_suffix might be too long. Let's construct it carefully.
  base_instance_name = substr("${var.instance_name_prefix}-${local.cleaned_vm_identifier}", 0, 54 - length(random_id.instance_suffix.hex)) # 63 - 1 (hyphen) - 8 (suffix) = 54
  final_instance_name = "${local.base_instance_name}-${random_id.instance_suffix.hex}"
  firewall_name       = "${local.base_instance_name}-${random_id.instance_suffix.hex}-fw"
}

# Define the compute instance
resource "google_compute_instance" "collector_vm" {
  project      = var.project_id
  zone         = var.zone
  name         = local.final_instance_name
  machine_type = var.machine_type
  tags         = concat(["stratum-collector-vm", "vm-${local.cleaned_vm_identifier}"], var.network_tags)

  boot_disk {
    initialize_params {
      image = var.boot_disk_image
    }
  }

  network_interface {
    # Use default network if subnetwork is not specified
    subnetwork = var.subnetwork != "" ? var.subnetwork : null
    # An empty access_config block requests an ephemeral public IP.
    access_config {
    }
  }

  metadata = {
    # startup-script is a special metadata key that GCP uses to run a script on boot.
    startup-script = templatefile("${path.module}/startup_script.sh.tpl", {
      # Pass the whole collectors_config structure as a JSON string
      collectors_config_json = jsonencode(var.collectors_config)
    })
  }

  # Service account for the instance
  service_account {
    email  = var.service_account_email != "" ? var.service_account_email : null
    scopes = ["https://www.googleapis.com/auth/cloud-platform"] # Adjust scopes as needed
  }

  lifecycle {
    create_before_destroy = true 
  }

  allow_stopping_for_update = true 
}

# Firewall rule to allow TCP traffic on specified ports
resource "google_compute_firewall" "allow_collector_tcp" {
  project     = var.project_id
  name        = local.firewall_name
  network     = "global/networks/default" # Assumes default network. Parameterize if needed.
  description = "Allow TCP traffic to stratum collectors on specified ports for VM: ${var.vm_identifier}"

  allow {
    protocol = "tcp"
    ports    = var.tcp_ports_to_open # This list is now dynamically generated by the root module
  }

  target_tags   = ["stratum-collector-vm"] # Target tag for the VM
  source_ranges = var.firewall_source_ranges # Allow traffic from specified IP ranges.
} 